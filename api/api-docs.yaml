openapi: 3.0.1
info:
  title: DL4DH Feeder APIs
  description: API endpoints
  version: 1.4.0
servers:
- url: https://feeder.dev.inqool.cz
  description: Generated server url
security:
- Keycloak: []
paths:
  /api/search:
    post:
      tags:
      - search-api
      operationId: search
      parameters:
      - name: save
        in: query
        description: Save the search query to user's history
        required: false
        schema:
          type: boolean
          description: Save the search query to user's history
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchDto'
  /api/search/hint:
    post:
      tags:
      - search-api
      operationId: hint
      parameters:
      - name: q
        in: query
        description: Query string
        required: true
        schema:
          type: string
          description: Query string
      - name: nameTagType
        in: query
        required: false
        schema:
          type: string
          enum:
          - NUMBERS_IN_ADDRESSES
          - GEOGRAPHICAL_NAMES
          - INSTITUTIONS
          - MEDIA_NAMES
          - NUMBER_EXPRESSIONS
          - ARTIFACT_NAMES
          - PERSONAL_NAMES
          - TIME_EXPRESSIONS
          - COMPLEX_PERSON_NAMES
          - COMPLEX_TIME_EXPRESSION
          - COMPLEX_ADDRESS_EXPRESSION
          - COMPLEX_BIBLIO_EXPRESSION
          - ALL
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/exports/generate:
    post:
      tags:
      - export-api
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequestCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Export'
  /api/zoomify/{uuid}/{group}/{coords}.jpg:
    get:
      tags:
      - zoomify-api
      operationId: tile
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      - name: coords
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
  /api/zoomify/{uuid}/ImageProperties.xml:
    get:
      tags:
      - zoomify-api
      operationId: properties
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
                format: binary
  /api/user/me:
    get:
      tags:
      - user-api
      operationId: me
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CurrentUserDto'
  /api/user/logout:
    get:
      tags:
      - user-api
      operationId: logout
      responses:
        "200":
          description: OK
  /api/search/localPrintPDF:
    get:
      tags:
      - search-api
      operationId: print
      parameters:
      - name: pids
        in: query
        required: true
        schema:
          type: string
          example: "uuid:677e4670-694b-11e4-8c6e-001018b5eb5c,uuid:6793a330-694b-11e4-8c6e-001018b5eb5c"
        example: "uuid:677e4670-694b-11e4-8c6e-001018b5eb5c,uuid:6793a330-694b-11e4-8c6e-001018b5eb5c"
      - name: pagesize
        in: query
        required: false
        schema:
          type: string
          default: A4
      - name: imgop
        in: query
        required: false
        schema:
          type: string
          default: FULL
      responses:
        "200":
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /api/search/history:
    get:
      tags:
      - history-api
      operationId: getAll
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
          default:
          - "id,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageFilter'
  /api/search/history/{id}:
    get:
      tags:
      - history-api
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Filter'
    delete:
      tags:
      - history-api
      operationId: deleteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/search/collections:
    get:
      tags:
      - search-api
      operationId: collections
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionDto'
  /api/item/{uuid}:
    get:
      tags:
      - item-api
      operationId: item
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/item/{uuid}/thumb:
    get:
      tags:
      - item-api
      operationId: thumb
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
  /api/item/{uuid}/streams:
    get:
      tags:
      - item-api
      operationId: streams
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/StreamDto'
  /api/item/{uuid}/streams/{stream}:
    get:
      tags:
      - item-api
      operationId: streamMods
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      - name: stream
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/item/{uuid}/children:
    get:
      tags:
      - item-api
      operationId: children
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/item/{uuid}/children/search:
    get:
      tags:
      - item-api
      operationId: childrenSearch
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      - name: q
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ChildSearchDto'
  /api/item/{uuid}/children/search/hint:
    get:
      tags:
      - item-api
      operationId: childrenSearchHint
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      - name: q
        in: query
        required: true
        schema:
          type: string
      - name: nameTagType
        in: query
        required: false
        schema:
          type: string
          enum:
          - NUMBERS_IN_ADDRESSES
          - GEOGRAPHICAL_NAMES
          - INSTITUTIONS
          - MEDIA_NAMES
          - NUMBER_EXPRESSIONS
          - ARTIFACT_NAMES
          - PERSONAL_NAMES
          - TIME_EXPRESSIONS
          - COMPLEX_PERSON_NAMES
          - COMPLEX_TIME_EXPRESSION
          - COMPLEX_ADDRESS_EXPRESSION
          - COMPLEX_BIBLIO_EXPRESSION
          - ALL
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
  /api/info:
    get:
      tags:
      - info-api
      operationId: info
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InfoDto'
  /api/feed/newest:
    get:
      tags:
      - feed-api
      operationId: newest
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PublicationsListDto'
  /api/feed/mostdesirable:
    get:
      tags:
      - feed-api
      operationId: mostDesirable
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PublicationsListDto'
  /api/feed/custom:
    get:
      tags:
      - feed-api
      operationId: custom
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PublicationsListDto'
  /api/exports:
    get:
      tags:
      - export-api
      operationId: getAll_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
          default:
          - "created,DESC"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExport'
  /api/exports/download/{id}:
    get:
      tags:
      - export-api
      operationId: download
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/zip:
              schema:
                type: array
                items:
                  type: string
                  format: byte
components:
  schemas:
    Filter:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: integer
          format: int64
          readOnly: true
        query:
          type: string
          description: Advanced SOLR filter
          example: macha AND (maj OR (zivot AND dilo))
        searchThroughPages:
          type: boolean
        availability:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
          - ALL
        models:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - MONOGRAPH
            - PERIODICAL
            - MAP
            - GRAPHICS
            - ARCHIVAL
            - MANUSCRIPT
            - SHEETMUSIC
        keywords:
          uniqueItems: true
          type: array
          items:
            type: string
            example: angličtina
        authors:
          uniqueItems: true
          type: array
          items:
            type: string
            example: "Aleš, Mikoláš"
        languages:
          uniqueItems: true
          type: array
          items:
            type: string
            example: cze
        collections:
          uniqueItems: true
          type: array
          items:
            type: string
            example: vc:0922837d-56af-43e4-980b-a75f26cda253
        from:
          type: integer
          format: int32
          example: 1920
        to:
          type: integer
          format: int32
          example: 2020
        sort:
          type: string
          enum:
          - TITLE_ASC
          - CREATED_DESC
          - DATE_ASC
          - DATE_DESC
          - LAST_ENRICHED
          - PAGE_TITLE_ASC
          - PAGE_LAST_ENRICHED
        enrichment:
          type: string
          enum:
          - ENRICHED
          - NOT_ENRICHED
          - ALL
        advancedFilterField:
          type: string
          enum:
          - TITLE
          - AUTHOR
          - KEYWORDS
          - NUMBERS_IN_ADDRESSES
          - GEOGRAPHICAL_NAMES
          - INSTITUTIONS
          - MEDIA_NAMES
          - NUMBER_EXPRESSIONS
          - ARTIFACT_NAMES
          - PERSONAL_NAMES
          - TIME_EXPRESSIONS
          - COMPLEX_PERSON_NAMES
          - COMPLEX_TIME_EXPRESSION
          - COMPLEX_ADDRESS_EXPRESSION
          - COMPLEX_BIBLIO_EXPRESSION
          - ALL_BASIC_METADATA
          - ALL_NAMETAG_DATA
          - NONE
        nameTagFilters:
          type: array
          items:
            $ref: '#/components/schemas/NameTagFilter'
        nameTagFacet:
          type: string
          description: Filter availableNameTagFilters response values
          example: "1"
        start:
          type: integer
          format: int32
          writeOnly: true
        pageSize:
          type: integer
          format: int32
          writeOnly: true
          example: 100
        name:
          type: string
          example: Obohacene publikace
        numFound:
          type: integer
          format: int64
          readOnly: true
    NameTagFilter:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          enum:
          - NUMBERS_IN_ADDRESSES
          - GEOGRAPHICAL_NAMES
          - INSTITUTIONS
          - MEDIA_NAMES
          - NUMBER_EXPRESSIONS
          - ARTIFACT_NAMES
          - PERSONAL_NAMES
          - TIME_EXPRESSIONS
          - COMPLEX_PERSON_NAMES
          - COMPLEX_TIME_EXPRESSION
          - COMPLEX_ADDRESS_EXPRESSION
          - COMPLEX_BIBLIO_EXPRESSION
          - ALL
        operator:
          type: string
          enum:
          - EQUAL
          - NOT_EQUAL
        values:
          uniqueItems: true
          type: array
          items:
            type: string
            example: "13"
    Authors:
      type: object
      properties:
        Aleš, Mikoláš:
          type: integer
          format: int32
          example: 136
        Arbes, Jakub:
          type: integer
          format: int32
          example: 151
    Availability:
      type: object
      properties:
        private:
          type: integer
          format: int32
          example: 216812
        public:
          type: integer
          format: int32
          example: 44226
    Collections:
      type: object
      properties:
        vc:05ae4510-72d4-4027-8c7a-e28d3f6900fb:
          $ref: '#/components/schemas/vc:05ae4510-72d4-4027-8c7a-e28d3f6900fb'
        vc:069d0e97-7f12-46e1-86af-fbc9cd6596df:
          $ref: '#/components/schemas/vc:069d0e97-7f12-46e1-86af-fbc9cd6596df'
    Enrichment:
      type: object
      properties:
        ALL:
          type: integer
          format: int32
          example: 261038
        NOT_ENRICHED:
          type: integer
          format: int32
          example: 261022
        ENRICHED:
          type: integer
          format: int32
          example: 16
    ExampleNameTagFilter:
      type: object
      properties:
        Abraham:
          type: integer
          format: int32
          example: 136
        "1898":
          type: integer
          format: int32
          example: 151
    Keywords:
      type: object
      properties:
        accounting:
          type: integer
          format: int32
          example: 367
        anglictina:
          type: integer
          format: int32
          example: 846
    Languages:
      type: object
      properties:
        cze:
          type: integer
          format: int32
          example: 208112
        eng:
          type: integer
          format: int32
          example: 30899
    Model:
      type: object
      properties:
        map:
          type: integer
          format: int32
          example: 3961
        monograph:
          type: integer
          format: int32
          example: 251086
        periodical:
          type: integer
          format: int32
          example: 4961
        sheetmusic:
          type: integer
          format: int32
          example: 1023
    OpenAPIAvailableFilters:
      type: object
      properties:
        models:
          $ref: '#/components/schemas/Model'
        enrichment:
          $ref: '#/components/schemas/Enrichment'
        keywords:
          $ref: '#/components/schemas/Keywords'
        languages:
          $ref: '#/components/schemas/Languages'
        collections:
          $ref: '#/components/schemas/Collections'
        availability:
          $ref: '#/components/schemas/Availability'
        years:
          $ref: '#/components/schemas/Years'
        authors:
          $ref: '#/components/schemas/Authors'
    OpenAPIAvailableNameTagFilters:
      type: object
      properties:
        institutions:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        geographicalNames:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        mediaNames:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        personalNames:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        complexPersonNames:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        complexTimeExpression:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        numbersInAddresses:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        numberExpressions:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        complexAddressExpression:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        complexBiblioExpression:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        artifactNames:
          $ref: '#/components/schemas/ExampleNameTagFilter'
        timeExpression:
          $ref: '#/components/schemas/ExampleNameTagFilter'
    PublicationDto:
      required:
      - authors
      - availability
      - date
      - enriched
      - model
      - parentPid
      - pid
      - rootTitle
      - title
      type: object
      properties:
        model:
          type: string
          example: monograph
        availability:
          type: string
          example: public
        date:
          type: string
          example: "1903"
        authors:
          type: array
          items:
            type: string
            example: "Aleš, Mikoláš"
        title:
          type: string
          example: Anatomický atlas koně a krávy
        pid:
          type: string
          example: uuid:541ac050-b54d-11ea-998c-005056827e51
        parentPid:
          type: array
          items:
            type: string
            example: uuid:541ac050-b54d-11ea-998c-005056827e51
        rootTitle:
          type: string
          example: Anatomický atlas koně a krávy
        enriched:
          type: boolean
    PublicationsListDto:
      required:
      - docs
      - numFound
      - start
      type: object
      properties:
        numFound:
          type: integer
          format: int64
          example: 320
        start:
          type: integer
          format: int64
          example: 1
        docs:
          type: array
          items:
            $ref: '#/components/schemas/PublicationDto'
    SearchDto:
      type: object
      properties:
        documents:
          $ref: '#/components/schemas/PublicationsListDto'
        availableFilters:
          $ref: '#/components/schemas/OpenAPIAvailableFilters'
        availableNameTagFilters:
          $ref: '#/components/schemas/OpenAPIAvailableNameTagFilters'
    TranslationsDto:
      required:
      - cs
      - en
      type: object
      properties:
        cs:
          type: string
          example: Pohádky
        en:
          type: string
          example: Fairy Tales
    Years:
      type: object
      properties:
        "0":
          type: integer
          format: int32
          example: 24755
        "1772":
          type: integer
          format: int32
          example: 55
    vc:05ae4510-72d4-4027-8c7a-e28d3f6900fb:
      required:
      - canLeave
      - descs
      - numberOfDocs
      - pid
      type: object
      properties:
        descs:
          $ref: '#/components/schemas/TranslationsDto'
        canLeave:
          type: boolean
        numberOfDocs:
          type: integer
          format: int32
          example: 32
        pid:
          type: string
          example: vc:05ae4510-72d4-4027-8c7a-e28d3f6900fb
    vc:069d0e97-7f12-46e1-86af-fbc9cd6596df:
      required:
      - canLeave
      - descs
      - numberOfDocs
      - pid
      type: object
      properties:
        descs:
          $ref: '#/components/schemas/TranslationsDto'
        canLeave:
          type: boolean
        numberOfDocs:
          type: integer
          format: int32
          example: 32
        pid:
          type: string
          example: vc:05ae4510-72d4-4027-8c7a-e28d3f6900fb
    AndFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
    EqFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
    ExportAltoJobConfigDto:
      type: object
      allOf:
      - $ref: '#/components/schemas/ExportJobConfigDto'
    ExportCsvJobConfigDto:
      type: object
      allOf:
      - $ref: '#/components/schemas/ExportJobConfigDto'
      - type: object
        properties:
          delimiter:
            type: string
    ExportJobConfigDto:
      type: object
      properties:
        params:
          $ref: '#/components/schemas/ParamsDto'
        exportFormat:
          type: string
          enum:
          - JSON
          - TEI
          - CSV
          - ALTO
          - TEXT
        jobType:
          type: string
          enum:
          - EXPORT_ALTO
          - EXPORT_TEXT
          - EXPORT_CSV
          - EXPORT_JSON
          - EXPORT_TEI
      discriminator:
        propertyName: jobType
    ExportJsonJobConfigDto:
      type: object
      allOf:
      - $ref: '#/components/schemas/ExportJobConfigDto'
    ExportRequestCreateDto:
      type: object
      properties:
        name:
          type: string
        publicationIds:
          type: array
          items:
            type: string
        config:
          oneOf:
          - $ref: '#/components/schemas/ExportAltoJobConfigDto'
          - $ref: '#/components/schemas/ExportCsvJobConfigDto'
          - $ref: '#/components/schemas/ExportJsonJobConfigDto'
          - $ref: '#/components/schemas/ExportTeiJobConfigDto'
          - $ref: '#/components/schemas/ExportTextJobConfigDto'
    ExportTeiJobConfigDto:
      type: object
      allOf:
      - $ref: '#/components/schemas/ExportJobConfigDto'
      - type: object
        properties:
          teiParams:
            $ref: '#/components/schemas/TeiParams'
    ExportTextJobConfigDto:
      type: object
      allOf:
      - $ref: '#/components/schemas/ExportJobConfigDto'
    GtFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
    InFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
          values:
            type: array
            items:
              type: string
    LtFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
          value:
            type: object
    NullFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
    OrFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
    Paging:
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    ParamsDto:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/Paging'
        sorting:
          type: array
          items:
            $ref: '#/components/schemas/Sorting'
        filters:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/AndFilter'
            - $ref: '#/components/schemas/EqFilter'
            - $ref: '#/components/schemas/GtFilter'
            - $ref: '#/components/schemas/InFilter'
            - $ref: '#/components/schemas/LtFilter'
            - $ref: '#/components/schemas/NullFilter'
            - $ref: '#/components/schemas/OrFilter'
            - $ref: '#/components/schemas/RegexFilter'
        includeFields:
          type: array
          items:
            type: string
        excludeFields:
          type: array
          items:
            type: string
    RegexFilter:
      type: object
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
          value:
            type: string
    Sorting:
      type: object
      properties:
        field:
          type: string
        direction:
          type: string
          enum:
          - ASC
          - DESC
    TeiParams:
      type: object
      properties:
        udPipeParams:
          type: array
          items:
            type: string
            enum:
            - "n"
            - lemma
            - pos
            - msd
            - join
        nameTagParams:
          type: array
          items:
            type: string
            enum:
            - a
            - g
            - i
            - m
            - "n"
            - o
            - p
            - t
        altoParams:
          type: array
          items:
            type: string
            enum:
            - height
            - width
            - vpos
            - hpos
    Export:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        publicationIds:
          uniqueItems: true
          type: array
          items:
            type: string
        publicationTitle:
          type: string
        created:
          type: string
          readOnly: true
        delimiter:
          type: string
          example: ","
        parameters:
          type: string
        teiParameters:
          type: string
        status:
          type: string
          readOnly: true
          enum:
          - CREATED
          - RUNNING
          - COMPLETED
          - SUCCESSFUL
          - FAILED
          - PARTIAL
          - STARTING
          - STARTED
          - STOPPING
          - STOPPED
          - ABANDONED
          - UNKNOWN
        format:
          type: string
          enum:
          - TEXT
          - TEI
          - JSON
          - CSV
          - ALTO
        finished:
          type: boolean
    CurrentUserDto:
      type: object
      properties:
        name:
          type: string
        roles:
          type: array
          items:
            type: string
    PageFilter:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    CollectionDto:
      required:
      - canLeave
      - descs
      - numberOfDocs
      - pid
      type: object
      properties:
        descs:
          $ref: '#/components/schemas/TranslationsDto'
        canLeave:
          type: boolean
        numberOfDocs:
          type: integer
          format: int32
          example: 32
        pid:
          type: string
          example: vc:05ae4510-72d4-4027-8c7a-e28d3f6900fb
    StreamDto:
      required:
      - label
      - mimeType
      type: object
      properties:
        label:
          type: string
        mimeType:
          type: string
    ChildSearchDto:
      type: object
      properties:
        textOcr:
          type: array
          items:
            type: string
        nameTag:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    FeederInfoDto:
      type: object
      properties:
        version:
          type: string
          example: 1.3.0
        contact:
          type: string
          example: example@example.com
    InfoDto:
      type: object
      properties:
        feeder:
          $ref: '#/components/schemas/FeederInfoDto'
        krameriusPlus:
          $ref: '#/components/schemas/KrameriusPlusVersionDto'
        kramerius:
          $ref: '#/components/schemas/KrameriusVersionDto'
    KrameriusPlusVersionDto:
      type: object
      properties:
        version:
          type: string
          example: 1.0.3
        timeOfLastBuild:
          type: string
          example: 2023-07-17T11:27:56.25
    KrameriusVersionDto:
      type: object
      properties:
        version:
          type: string
          example: 5.8.3
        name:
          type: string
          example: Národní knihovna České republiky
        name_en:
          type: string
          example: National Library of the Czech Republic
        logo:
          type: string
          example: https://api.registr.digitalniknihovna.cz/libraries/nkp/logo
        url:
          type: string
          example: https://www.ndk.cz
    PageExport:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Export'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
  securitySchemes:
    Keycloak:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://keycloak.sekan.eu/realms/DL4DHFeeder/protocol/openid-connect/auth
          tokenUrl: https://keycloak.sekan.eu/realms/DL4DHFeeder/protocol/openid-connect/token
          scopes:
            openid: base scope
